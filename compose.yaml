# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  frontend:
    build:
      context: .
      target: frontend
    environment:
      BACKEND_URL: http://backend:3000
      PORT: 8080
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - 8080:8080
  backend:
    build:
      context: .
      target: backend
    environment:
      NODE_ENV: production
      PORT: 3000
      PGPASSWORDFILE: /run/secrets/db-password
      PGHOST: db
      PGUSER: postgres
      PGPORT: 5432
      PGDATABASE: taskdb
    ports:
      - 3000:3000
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password
    healthcheck:
      test:
        # node
        [
          'CMD',
          'wget --no-verbose --server-response --tries=1
          --spider  http://localhost:3000/v1/health',
        ]
      interval: 5s
      timeout: 1s
      retries: 3
  db:
    image: postgres:17-alpine
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./packages/backend/db:/docker-entrypoint-initdb.d:ro
    environment:
      POSTGRES_DB: taskdb
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
    expose:
      - 5432
    ports:
      - 5432:5432

    healthcheck:
      test: ['CMD', 'pg_isready']
      interval: 5s
      timeout: 1s
      retries: 3

volumes:
  db-data:
secrets:
  db-password:
    file: db/dbpass.txt
  db-passwordfile:
    file: db/password-file.txt
